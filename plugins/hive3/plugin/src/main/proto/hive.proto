/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dremio.hive.proto;

option java_package = "com.dremio.hive.proto";
option java_outer_classname = "HiveReaderProto";
option optimize_for = SPEED;
option java_generate_equals_and_hash = true;

// Note to developers: updates to this file may require changes to HiveReaderProtoUtil

enum ReaderType {
  UNKNOWN = 0;
  BASIC = 1;
  NATIVE_PARQUET = 2;
}

enum PropertyCollectionType {
  LIST = 0;
  DICTIONARY = 1;
}

enum HivePrimitiveType {
  BOOLEAN = 0;
  BYTE = 1;
  SHORT = 2;
  INT = 3;
  LONG = 4;
  FLOAT = 5;
  DOUBLE = 6;
  DATE = 7;
  TIMESTAMP = 8;
  BINARY = 9;
  DECIMAL = 10;
  STRING = 11;
  VARCHAR = 12;
  CHAR = 13;
}

message ColumnInfo {
  optional HivePrimitiveType primitive_type = 1;
  optional int32 precision = 2;
  optional int32 scale = 3;
}

message HiveTableXattr {
  repeated Prop table_property = 1;
  optional string input_format = 2;
  optional string storage_handler = 3;
  optional string serialization_lib = 4;

  optional ReaderType reader_type = 5;
  repeated PartitionXattr partitionXattrs = 6 [deprecated=true]; // Deprecated as of v3.2: cached properties for all partitions of this table to avoid duplication
  optional int32 table_hash = 7; // used to check if table definition has changed
  optional int32 partition_hash = 8; // used to check if partitions have changed (added/deleted/modified)

  optional PropertyCollectionType property_collection_type = 9 [default = LIST];

  repeated Prop property_dictionary = 10;
  repeated string input_format_dictionary = 11;
  repeated string storage_handler_dictionary = 12;
  repeated string serialization_lib_dictionary = 13;

  repeated int32 table_property_subscript = 14; // lookup these values in property_dictionary
  optional int32 table_input_format_subscript = 15; // lookup this value in input_format_dictionary
  optional int32 table_storage_handler_subscript = 16; // lookup this value in storage_handler_dictionary
  optional int32 table_serialization_lib_subscript = 17; // lookup this value in serialization_lib_dictionary
  repeated ColumnInfo column_info = 18;
}

message HiveSplitXattr {
  repeated Prop partition_property = 1 [deprecated=true];
  optional string input_format = 2 [deprecated=true];
  optional string storage_handler = 3 [deprecated=true];
  optional SerializedInputSplit input_split = 4;
  optional string serialization_lib = 5 [deprecated=true];
  optional int32 partition_id = 6; // partition id this split belongs to
}

message SerializedInputSplit {
  optional string input_split_class = 1;
  optional bytes input_split = 2;
}

message PartitionXattr { // Per partition properties which are common for all splits in a partition
  repeated Prop partition_property = 1;
  optional string input_format = 2;
  optional string storage_handler = 3;
  optional string serialization_lib = 4;

  repeated int32 property_subscript = 5; // lookup these values in property_dictionary
  optional int32 input_format_subscript = 6; // lookup this value in input_format_dictionary
  optional int32 storage_handler_subscript = 7; // lookup this value in storage_handler_dictionary
  optional int32 serialization_lib_subscript = 8; // lookup this value in serialization_lib_dictionary
}

message Prop {
  optional string key = 1;
  optional string value = 2;
}

enum HiveReadSignatureType {
  FILESYSTEM = 1;
}

message FileSystemCachedEntity {
  optional string path = 1; // relative path of the entity
  optional int64 lastModificationTime = 2;
  optional bool isDir = 3; // is this a directory or a file
}

message FileSystemPartitionUpdateKey {
  repeated Prop partition_property = 1 [deprecated=true];
  repeated FileSystemCachedEntity cached_entities = 2;
  optional string partition_root_dir = 3; // root directory of partition
  optional int32 partition_id = 4; // partition index
}

message HiveReadSignature {
  optional HiveReadSignatureType type = 1;
  repeated FileSystemPartitionUpdateKey fs_partition_updateKeys = 2;
}
