/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";
package exec.bit.control;

option java_package = "com.dremio.exec.proto";
option java_outer_classname = "CoordExecRPC";
option optimize_for = SPEED;
option java_generate_equals_and_hash = true;

import "ExecutionProtos.proto";
import "Coordination.proto";
import "UserBitShared.proto";


////// BitControl RPC ///////
enum RpcType {
  ACK = 1;

  // coordinator > exec
  REQ_START_FRAGMENTS = 2;
  REQ_ACTIVATE_FRAGMENTS = 3;
  REQ_CANCEL_FRAGMENTS = 4;

  // exec > coordinator
  REQ_FRAGMENT_STATUS = 5;
  REQ_QUERY_DATA = 6;
  REQ_NODE_QUERY_STATUS = 7;
  REQ_QUERY_METADATA = 8;

  REQ_NODE_QUERY_SCREEN_COMPLETION = 11;
  REQ_NODE_QUERY_COMPLETION = 12;
  REQ_NODE_QUERY_ERROR = 13;
  REQ_NODE_QUERY_PROFILE = 14;

  REQ_NODE_STATS = 9;
  RESP_NODE_STATS = 10;
}

message NodeStatResp {
  optional NodeEndpoint endpoint = 1;
  optional NodeStats node_stats = 2;
}

message NodeStatReq {
}

message NodeStats {
  optional string name = 1;
  optional string ip = 2;
  optional int32 port = 3;
  optional double memory = 4;
  optional double cpu = 5;
  optional string version = 6;
  optional string status = 7;
  optional double load = 8;
  optional int32 configured_max_width = 9;
  optional int32 actual_max_with = 10;
  optional bool current = 11;
}

message BitStatus {
  repeated FragmentStatus fragment_status = 1;
}

message FragmentStatus {
  optional exec.shared.MinorFragmentProfile profile = 1;
  optional FragmentHandle handle = 2;
}

// Coordinator > Executor
message InitializeFragments {
  optional SchedulingInfo scheduling_info = 2;
  optional PlanFragmentSet fragment_set = 4;
}

message PlanFragmentSet {
  repeated NodeEndpoint endpoints_index = 1;
  repeated PlanFragmentMajor major = 2;
  repeated PlanFragmentMinor minor = 3;

  // attributes shared across all majors/minors.
  repeated MinorAttr attr = 4;
}

message SchedulingInfo {
  optional string queue_id = 1;
  optional exec.shared.WorkloadClass workload_class = 2;
  optional bytes additional_info = 3;
}

message ActivateFragments {
  optional exec.shared.QueryId query_id = 1;
}

message CancelFragments {
  optional exec.shared.QueryId query_id = 2;
}

enum FragmentCodec {
    NONE = 0;
    SNAPPY = 1;
}

// Information that is common for all the minors of this fragment.
message PlanFragmentMajor {
  optional FragmentHandle handle = 1;
  optional float network_cost = 2;
  optional float cpu_cost = 3;
  optional float disk_cost = 4;
  optional float memory_cost = 5;
  optional bytes fragment_json = 6;
  optional bool leaf_fragment = 7;
  optional bytes options_json = 8;
  optional NodeEndpoint foreman = 9;
  optional int64 mem_initial = 10 [default = 20000000]; // 20 megs
  optional exec.shared.UserCredentials credentials = 11;
  optional QueryContextInformation context = 12;
  optional FragmentPriority priority = 13;
  optional FragmentCodec fragment_codec = 14;
  repeated FragmentAssignment all_assignment = 15;
  repeated MajorFragmentAssignment ext_fragment_assignments = 16;
}

message MajorFragmentAssignment {
  required int32 major_fragment_id = 1;
  repeated FragmentAssignment all_assignment = 2;
}

// Information that is specific for the minor.
message PlanFragmentMinor {
  optional int32 major_fragment_id = 1;
  optional int32 minor_fragment_id = 2;
  optional NodeEndpoint assignment = 3;
  optional int64 mem_max = 4 [default = 2000000000]; // 20 gigs
  repeated Collector collector = 5;
  repeated MinorAttr attrs = 6;
}

// Key-value pairs for minor-specific attributes (saved at the minor level or at the rpc level).
message MinorAttr {
  optional int32 operator_id = 1;
  optional string name = 2;
  optional bytes value = 3;
}

message FragmentAssignment {
  repeated int32 minor_fragment_id = 2;
  optional int32 assignment_index = 3;
}

message FragmentPriority {
  optional exec.shared.WorkloadClass workload_class = 1;
}

message Collector {
  optional int32 opposite_major_fragment_id = 1;
  optional bool supports_out_of_order = 3;
  optional bool is_spooling = 4;
  repeated MinorFragmentIndexEndpoint incoming_minor_fragment_index = 5;
}

message QueryContextInformation {
  optional int64 query_start_time = 1;      // start time of query in milliseconds
  optional int32 time_zone = 2;             // timezone of the node where user is connected
  optional string default_schema_name = 3;  // default schema in current session when the query is submitted
  optional FragmentPriority priority = 4;
  optional int64 query_max_allocation = 5;
  optional bytes extra = 6;
  optional exec.shared.QueryId last_query_id = 7;
}

message HBaseSubScanSpec {
  optional string namespace = 1;
  optional string table_name = 2;
  optional bytes start_row = 3;
  optional bytes stop_row = 4;
  optional bytes serialized_filter = 5;
}

message HBaseSubScanSpecList {
  repeated HBaseSubScanSpec scans = 1;
}

// fragment endpoint used by senders/receivers.
message MinorFragmentIndexEndpoint {
  optional int32 minor_fragment_id = 1;
  optional int32 endpoint_index = 2;
}

// List of fragment end-points.
message MinorFragmentIndexEndpointList {
  repeated MinorFragmentIndexEndpoint frags = 1;
}

// executor > coordinator : completion of screen operator for a query
message NodeQueryScreenCompletion {
  optional exec.shared.QueryId id = 1;
  optional NodeEndpoint endpoint = 2;
  optional NodeEndpoint foreman = 3;
}

// executor > coordinator : completion of all fragments on an executor for a query
message NodeQueryCompletion {
  optional exec.shared.QueryId id = 1;
  optional NodeEndpoint endpoint = 2;
  optional bool results_sent = 3;

  // error, if any, during execution
  optional exec.shared.DremioPBError first_error = 4;
  optional int32 error_major_fragment_id = 5;
  optional int32 error_minor_fragment_id = 6;

  // the final profile from the node for the query
  optional ExecutorQueryProfile final_node_query_profile = 7;

  optional NodeEndpoint foreman = 8;
}

// executor > coordinator : report first error for a query on an executor
message NodeQueryFirstError {
  optional FragmentHandle handle = 1;
  optional NodeEndpoint endpoint = 2;
  optional exec.shared.DremioPBError error = 3;
  optional NodeEndpoint foreman = 4;
}

// progress metrics
message QueryProgressMetrics {
  optional int64 rows_processed = 1;
}

// node level metrics, for a query.
message NodeQueryStatus {
  optional exec.shared.QueryId id = 1 [ deprecated = true ];
  optional NodeEndpoint endpoint = 2 [ deprecated = true ];
  repeated NodePhaseStatus phase_status = 3;
  optional int64 max_memory_used = 4;
  optional int64 time_enqueued_before_submit_ms = 5;  // Time spent enqueued after query arrived at executor, and before
  // being submitted for execution. Measured in milliseconds
}

// phase level metrics, for a query.
message NodePhaseStatus {
  optional int32 major_fragment_id = 1;
  optional int64 max_memory_used = 2;
}

// profile and metrics from one executor node.
message ExecutorQueryProfile {
  optional exec.shared.QueryId queryId = 1;
  optional NodeEndpoint endpoint = 2;

  // progress metrics
  optional QueryProgressMetrics progress = 3;

  // node level status
  optional NodeQueryStatus node_status = 4;

  // fragment statuses
  repeated FragmentStatus fragments = 5;
}
