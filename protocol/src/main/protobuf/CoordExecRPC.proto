/*
 * Copyright (C) 2017 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exec.bit.control;

option java_package = "com.dremio.exec.proto";
option java_outer_classname = "CoordExecRPC";
option optimize_for = SPEED;

import "ExecutionProtos.proto";
import "Coordination.proto";
import "UserBitShared.proto";


////// BitControl RPC ///////
enum RpcType {
  ACK = 1;

  // coordinator > exec
  REQ_START_FRAGMENTS = 2;
  REQ_CANCEL_FRAGMENTS = 3;

  // exec > coordinator
  REQ_FRAGMENT_STATUS = 4;
  REQ_QUERY_DATA = 5;
  REQ_NODE_QUERY_STATUS = 6;
  
}

message BitStatus {
  repeated FragmentStatus fragment_status = 1;
}

message FragmentStatus {
  optional exec.shared.MinorFragmentProfile profile = 1;
  optional FragmentHandle handle = 2;
}

// Coordinator > Executor
message InitializeFragments {
  repeated PlanFragment fragment = 1;
}

message CancelFragments {
  repeated exec.bit.FragmentHandle fragment = 1;
}

enum FragmentCodec {
    NONE = 0;
    SNAPPY = 1;
}

message PlanFragment {
  optional FragmentHandle handle = 1;
  optional float network_cost = 4;
  optional float cpu_cost = 5;
  optional float disk_cost = 6;
  optional float memory_cost = 7;
  optional bytes fragment_json = 8;
  optional bool leaf_fragment = 9;
  optional NodeEndpoint assignment = 10;
  optional NodeEndpoint foreman = 11;
  optional int64 mem_initial = 12 [default = 20000000]; // 20 megs
  optional int64 mem_max = 13 [default = 2000000000]; // 20 gigs
  optional exec.shared.UserCredentials credentials = 14;
  optional bytes options_json = 15;
  optional QueryContextInformation context = 16;
  repeated Collector collector = 17;
  optional FragmentPriority priority = 18;
  optional FragmentCodec fragment_codec = 19;
}

message FragmentPriority {
  optional exec.shared.WorkloadClass workload_class = 1;
}

message Collector {
  optional int32 opposite_major_fragment_id = 1;
  repeated IncomingMinorFragment incoming_minor_fragment = 2; 
  optional bool supports_out_of_order = 3;
  optional bool is_spooling = 4;
}

message IncomingMinorFragment {
  optional int32 minor_fragment = 1;
  optional NodeEndpoint endpoint = 2 ;
}

message QueryContextInformation {
  optional int64 query_start_time = 1;      // start time of query in milliseconds
  optional int32 time_zone = 2;             // timezone of the node where user is connected
  optional string default_schema_name = 3;  // default schema in current session when the query is submitted
  optional FragmentPriority priority = 4;
  optional int64 query_max_allocation = 5;
}

message NodeQueryStatus {
  optional exec.shared.QueryId id = 1;
  optional NodeEndpoint endpoint = 2;
  repeated NodePhaseStatus phase_status = 3;
}

message NodePhaseStatus {
  optional int32 major_fragment_id = 1;
  optional int64 max_memory_used = 2;
}
