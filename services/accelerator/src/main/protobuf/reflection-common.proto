/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dremio.service.reflection.proto;

import "job.proto";
import "dataset.proto";

option java_package = "com.dremio.service.reflection.proto";
option optimize_for = SPEED;

option java_outer_classname = "ReflectionCommonProtobuf";

// NOTE that these messages are used both by DAC and backend. Any change made directly implies a change in client protocol.

enum MaterializationState {
    RUNNING = 1; // refresh job running
    DONE = 2; // refresh job succeeded and metadata refreshed
    FAILED = 3; // refresh job failed
    CANCELED = 4; // refresh job canceled
    DEPRECATED = 5; // ready to be deleted
    DELETED = 6; // deletion processed
    COMPACTED = 7; // terminal state, this materialization has been compacted
}

message ReflectionId {
  required string id = 1;
}

// A repeatable hash of all fields, including nested fields, used to create reflections and materializations
message ReflectionGoalHash {
  required string hash = 1;
}

// defines type of layout. ROLLUP for aggregation layouts, RAW otherwise
enum ReflectionType {
  RAW = 1;
  AGGREGATION = 2;
  EXTERNAL = 3;
}

message RowType {
  // row type of the materialization
  repeated com.dremio.service.namespace.dataset.proto.ViewFieldType field = 1;
}

enum FieldSortOrder {
  ASC = 1;
  DESC = 2;
}

enum DimensionGranularity {
  DATE = 1;
  NORMAL = 2;
}

// distribution strategy for data within a partition
enum PartitionDistributionStrategy {
  CONSOLIDATED = 1;
  STRIPED = 2;
}

// the type of reflection measure.
enum MeasureType {
  UNKNOWN = 0;
  MIN = 1;
  MAX = 2;
  SUM = 3;
  COUNT = 4;
  APPROX_COUNT_DISTINCT = 5;
}

// failure details
message Failure {
  // failure message
  optional string message = 1;
  // stack trace
  optional string stackTrace = 2;
}
