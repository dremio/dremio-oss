/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dremio.datastore;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.Test;

import com.dremio.datastore.SearchTypes.SearchQuery;
import com.dremio.datastore.SearchTypes.SearchQuery.Term;
import com.google.protobuf.ByteString;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.UnknownFieldSet;
import com.google.protobuf.UnknownFieldSet.Field;

/**
 * Tests for {@code LegacyProtobufSerializer}
 */
public class TestLegacyProtobufSerializer {

  @Test
  public void testParse() throws InvalidProtocolBufferException {
    // Creating a protobuf message as it would be generated by protostuff for the following message
    // SearchQuery -> Boolean -> [ SearchQuery -> Term, SearchQuery -> Term ]

    final UnknownFieldSet term1 = UnknownFieldSet.newBuilder()
        .addField(SearchQuery.Term.FIELD_FIELD_NUMBER, Field.newBuilder().addLengthDelimited(ByteString.copyFromUtf8("foo")).build())
        .addField(SearchQuery.Term.VALUE_FIELD_NUMBER, Field.newBuilder().addLengthDelimited(ByteString.copyFromUtf8("bar")).build())
        .build();
    final UnknownFieldSet sq1 = UnknownFieldSet.newBuilder()
        .addField(SearchQuery.TYPE_FIELD_NUMBER, Field.newBuilder().addVarint(SearchQuery.Type.TERM_VALUE).build())
        .addField(SearchQuery.TERM_FIELD_NUMBER, Field.newBuilder().addGroup(term1).build())
        .build();

    final UnknownFieldSet term2 = UnknownFieldSet.newBuilder()
        .addField(SearchQuery.Term.FIELD_FIELD_NUMBER, Field.newBuilder().addLengthDelimited(ByteString.copyFromUtf8("foo")).build())
        .addField(SearchQuery.Term.VALUE_FIELD_NUMBER, Field.newBuilder().addLengthDelimited(ByteString.copyFromUtf8("baz")).build())
        .build();
    final UnknownFieldSet sq2 = UnknownFieldSet.newBuilder()
        .addField(SearchQuery.TYPE_FIELD_NUMBER, Field.newBuilder().addVarint(SearchQuery.Type.TERM_VALUE).build())
        .addField(SearchQuery.TERM_FIELD_NUMBER, Field.newBuilder().addGroup(term2).build())
        .build();

    final UnknownFieldSet bool = UnknownFieldSet.newBuilder()
        .addField(SearchQuery.Boolean.OP_FIELD_NUMBER, Field.newBuilder().addVarint(SearchQuery.BooleanOp.AND_VALUE).build())
        .addField(SearchQuery.Boolean.CLAUSES_FIELD_NUMBER, Field.newBuilder().addGroup(sq1).addGroup(sq2).build())
        .build();

    final SearchQuery query = SearchQuery.newBuilder()
        .setType(SearchQuery.Type.BOOLEAN)
        .setUnknownFields(UnknownFieldSet.newBuilder().addField(SearchQuery.BOOLEAN_FIELD_NUMBER, Field.newBuilder().addGroup(bool).build()).build())
        .build();

    final SearchQuery expected = SearchQuery.newBuilder()
        .setType(SearchQuery.Type.BOOLEAN)
        .setBoolean(
            SearchQuery.Boolean.newBuilder()
              .setOp(SearchQuery.BooleanOp.AND)
              .addClauses(SearchQuery.newBuilder()
                  .setType(SearchQuery.Type.TERM).setTerm(Term.newBuilder().setField("foo").setValue("bar")))
              .addClauses(SearchQuery.newBuilder()
                  .setType(SearchQuery.Type.TERM).setTerm(Term.newBuilder().setField("foo").setValue("baz")))
              )
        .build();

    assertThat(LegacyProtobufSerializer.parseFrom(SearchQuery.PARSER, query.toByteString())).isEqualTo(expected);
  }


}
