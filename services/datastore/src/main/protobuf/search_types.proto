/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";
package com.dremio.datastore;

option java_package = "com.dremio.datastore";
option optimize_for = SPEED;

message SearchQuery {
    enum Type {
        MATCH_ALL = 1;
        BOOLEAN = 2;
        NOT = 3;
        TERM = 4;
        RANGE_INT = 5;
        RANGE_LONG = 6;
        RANGE_FLOAT = 7;
        RANGE_DOUBLE = 8;
        RANGE_TERM = 9;
        WILDCARD = 10;
        TERM_INT = 11;
        TERM_LONG = 12;
        TERM_FLOAT = 13;
        TERM_DOUBLE = 14;
        EXISTS = 15;
        DOES_NOT_EXIST = 16;
        BOOST = 17;
        CONTAINS = 18;
        PREFIX = 19;
    }

    enum BooleanOp {
        OR = 1;
        AND = 2;
    }

    // Match all documents
    message MatchAll {
    }

    message Boolean {
        required BooleanOp      op = 1;
        repeated SearchQuery    clauses = 2;
    }

    message Not {
        required SearchQuery clause = 1;
    }

    message Term {
        required string field = 1;
        required string value = 2;
    }

    message TermInt {
      required string field = 1;
      required int32 value = 2;
    }

    message TermLong {
      required string field = 1;
      required int64 value = 2;
    }

    message TermFloat {
      required string field = 1;
      required float value = 2;
    }

    message TermDouble {
      required string field = 1;
      required double value = 2;
    }

    message RangeInt {
        required string field = 1;
        optional int32  min = 2;
        optional int32  max = 3;
        required bool   minInclusive = 4;
        required bool   maxInclusive = 5;
    }

    message RangeLong {
        required string field = 1;
        optional int64  min = 2;
        optional int64  max = 3;
        required bool   minInclusive = 4;
        required bool   maxInclusive = 5;
    }

    message RangeFloat {
        required string field = 1;
        optional float  min = 2;
        optional float  max = 3;
        required bool   minInclusive = 4;
        required bool   maxInclusive = 5;
    }

    message RangeDouble {
        required string field = 1;
        optional double min = 2;
        optional double max = 3;
        required bool   minInclusive = 4;
        required bool   maxInclusive = 5;
    }

    message RangeTerm {
        required string field = 1;
        optional string min = 2;
        optional string max = 3;
        required bool   minInclusive = 4;
        required bool   maxInclusive = 5;
    }

    message Wildcard {
        required string field = 1;
        required string value = 2;
    }

    message Exists {
      required string field = 1;
    }

    message Boost {
      required SearchQuery clause = 1;
      required float       boost = 2;
    }

    message Contains {
      required string field = 1;
      required string value = 2;
    }

    message Prefix {
      required string field = 1;
      required string value = 2;
    }

    required Type           type = 1;
    optional MatchAll       matchAll = 2;
    optional Boolean        boolean = 3;
    optional Not            not = 4;
    optional Term           term = 5;
    optional RangeInt       rangeInt = 6;
    optional RangeLong      rangeLong = 7;
    optional RangeFloat     rangeFloat = 8;
    optional RangeDouble    rangeDouble = 9;
    optional RangeTerm      rangeTerm = 10;
    optional Wildcard       wildcard = 11;
    optional TermInt        termInt = 12;
    optional TermLong       termLong = 13;
    optional TermFloat      termFloat = 14;
    optional TermDouble     termDouble = 15;
    optional Exists         exists = 16;
    optional Boost          boost = 17;
    optional Contains       containsText = 18;
    optional Prefix         prefix = 19;
}

enum SortOrder {
    ASCENDING = 1;
    DESCENDING = 2;
}

message SearchFieldSorting {
    enum FieldType {
        STRING = 1;
        LONG = 2;
        DOUBLE = 3;
        INTEGER = 4;
    }

    required string field = 1; // field name to sort by
    required FieldType type = 2;
    required SortOrder order = 3;
}
