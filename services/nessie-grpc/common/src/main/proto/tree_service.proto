/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package com.dremio.services.nessie.grpc.proto;

import "google/protobuf/timestamp.proto";
import "util.proto";
import "content_service.proto";

option java_multiple_files = true;
option java_package = "com.dremio.services.nessie.grpc.api";
option java_outer_classname = "TreeServiceProto";

service TreeService {
  rpc getAllReferences (GetAllReferencesRequest) returns (GetAllReferencesResponse) {}
  rpc getReferenceByName (GetReferenceByNameRequest) returns (Reference) {}
  rpc createReference (CreateReferenceRequest) returns (Reference) {}
  rpc getDefaultBranch (Empty) returns (Reference) {}
  rpc assignReference (AssignReferenceRequest) returns (Empty) {}
  rpc deleteReference (DeleteReferenceRequest) returns (Empty) {}
  rpc getCommitLog (CommitLogRequest) returns (CommitLogResponse) {}
  rpc getEntries (EntriesRequest) returns (EntriesResponse) {}
  rpc transplantCommitsIntoBranch (TransplantRequest) returns (Empty) {}
  rpc mergeRefIntoBranch (MergeRequest) returns (Empty) {}
  rpc commitMultipleOperations (CommitRequest) returns (Branch) {}
}

enum ReferenceType {
  BRANCH = 0;
  TAG = 1;
}

message Reference {
  oneof type {
    Branch branch = 1;
    Tag tag = 2;
    Detached detached = 3;
  }
}

message Branch {
  string name = 1;
  optional string hash = 2;
  optional ReferenceMetadata metadata = 3;
}

message Tag {
  string name = 1;
  optional string hash = 2;
  optional ReferenceMetadata metadata = 3;
}

message Detached {
  optional string hash = 2;
  optional ReferenceMetadata metadata = 3;
}

message ReferenceMetadata {
  optional int32 numCommitsAhead = 1;
  optional int32 numCommitsBehind = 2;
  optional CommitMeta commitMetaOfHEAD = 3;
  optional string commonAncestorHash = 4;
  optional int64 numTotalCommits = 5;
}

message CreateReferenceRequest {
  string sourceRefName = 1;
  Reference reference = 2;
}

message GetAllReferencesRequest {
  optional int32 maxRecords = 1;
  optional string pageToken = 2;
  optional FetchOption fetchOption = 3;
  optional string filter = 4;
}

message GetAllReferencesResponse {
  repeated Reference reference = 1;
}

message GetReferenceByNameRequest {
  string namedRef = 1;
  optional FetchOption fetchOption = 3;
}

message AssignReferenceRequest {
  string namedRef = 1;
  string oldHash = 2;
  oneof assignTo {
    Branch branch = 3;
    Tag tag = 4;
    Detached detached = 5;
  }
  ReferenceType reference_type = 6;
}

message DeleteReferenceRequest {
  string namedRef = 1;
  string hash = 2;
  ReferenceType reference_type = 6;
}

message CommitLogRequest {
  string namedRef = 1;
  optional string startHash = 2;
  optional string endHash = 3;
  optional int32 maxRecords = 4;
  optional string pageToken = 5;
  optional string filter = 6;
  optional FetchOption fetchOption = 7;
}

message CommitLogResponse {
  repeated CommitLogEntry logEntries = 1;
  bool hasMore = 2;
  optional string token = 3;
}

message CommitLogEntry {
  CommitMeta commitMeta = 1;
  optional string parentCommitHash = 2;
  repeated CommitOperation operations = 3;
}

message CommitMeta {
  optional string hash = 1;
  optional string committer = 2;
  optional string author = 3;
  optional string signedOffBy = 4;
  string message = 5;
  optional google.protobuf.Timestamp commitTime = 6;
  optional google.protobuf.Timestamp authorTime = 7;
  map<string, string> properties = 8;
}

message EntriesRequest {
  string namedRef = 1;
  optional string hashOnRef = 2;
  optional int32 maxRecords = 3;
  optional string pageToken = 4;
  optional string filter = 5;
  optional int32 namespaceDepth = 6;
}

message EntriesResponse {
  repeated Entry entries = 1;
  bool hasMore = 2;
  optional string token = 3;
}

enum ContentType {
  UNKNOWN = 0;
  ICEBERG_TABLE = 1;
  DELTA_LAKE_TABLE = 2;
  ICEBERG_VIEW = 3;
}

message Entry {
  ContentType type = 1;
  ContentKey contentKey = 2;
}

message TransplantRequest {
  string branchName = 1;
  string hash = 2;
  string message = 3;
  string fromRefName = 4;
  repeated string hashesToTransplant = 5;
}

message MergeRequest {
  string fromHash = 1;
  string toBranch = 2;
  string expectedHash = 3;
  string fromRefName = 4;
}

message CommitRequest {
  string branch = 1;
  string hash = 2;
  CommitOps commitOperations = 3;
}

message CommitOps {
  CommitMeta commitMeta = 1;
  repeated CommitOperation operations = 2;
}

message CommitOperation {
  oneof type {
    Put put = 1;
    Delete delete = 2;
    Unchanged unchanged = 3;
  }
}

message Put {
  ContentKey key = 1;
  Content content = 2;
  optional Content expectedContent = 3;
}

message Delete {
  ContentKey key = 1;
}

message Unchanged {
  ContentKey key = 1;
}

enum FetchOption {
  MINIMAL = 0;
  ALL = 1;
}
